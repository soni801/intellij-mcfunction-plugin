/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.MinecraftTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Minecraft.flex</tt>
 */
class MinecraftLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\46\1\1\1\3\2\45\1\3\22\46\1\1\1\40\1\44\1\2\11\46\1\21\2\46\12\43\1\41"+
    "\2\46\1\40\1\46\1\4\1\37\34\46\1\42\3\46\1\5\1\17\1\11\1\6\1\12\1\30\1\27"+
    "\1\32\1\16\1\35\1\26\1\23\1\13\1\10\1\25\1\22\1\36\1\15\1\24\1\14\1\20\1\7"+
    "\1\34\1\33\1\31\4\46\1\43\6\46\1\45\32\46\1\0\77\46\12\43\46\46\12\43\14\46"+
    "\12\43\20\46\12\43\6\46\12\43\6\46\13\0\35\46\2\45\5\46\1\0\57\46\1\0\26\46"+
    "\12\43\16\46\62\43");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\13\1\1\5\11\1"+
    "\1\4\4\1\1\6\1\1\1\6\3\1\1\7\1\1"+
    "\1\7\63\1\1\10\1\6\2\0\1\1\1\6\1\11"+
    "\1\6\37\1\1\4\16\1\1\7\23\1\1\6\3\11"+
    "\1\6\5\1\1\4\13\1\1\4\1\1\1\4\27\1"+
    "\1\4\17\1\1\6\70\1\1\4\3\1\1\4\71\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\234"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492"+
    "\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\234"+
    "\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db"+
    "\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813"+
    "\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b"+
    "\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb"+
    "\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\234\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u04b9\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15"+
    "\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d"+
    "\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185"+
    "\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd"+
    "\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5"+
    "\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d"+
    "\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665"+
    "\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d"+
    "\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u0db6\0\u0ddd"+
    "\0\u0e04\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u194a\0\u1971\0\u1998"+
    "\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0"+
    "\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08"+
    "\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40"+
    "\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u1e78"+
    "\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0"+
    "\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1\0\u20e8"+
    "\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9\0\u2220"+
    "\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358"+
    "\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469\0\u2490"+
    "\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a\0\u25a1\0\u25c8"+
    "\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2\0\u26d9\0\u2700"+
    "\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3\0\u27ea\0\u2811\0\u2838"+
    "\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u2970"+
    "\0\u2997\0\u29be\0\u29e5\0\u2a0c\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8"+
    "\0\u2acf\0\u2af6\0\u2b1d\0\u2b44\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0"+
    "\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18"+
    "\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50"+
    "\0\u2e77\0\u2e9e\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u2f88"+
    "\0\u2faf\0\u2fd6\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0"+
    "\0\u30e7\0\u310e\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8"+
    "\0\u321f\0\u3246\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309\0\u3330"+
    "\0\u3357\0\u337e\0\u33a5\0\u33cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\2\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\10\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\10\1\21\1\41\1\2\1\10\1\2\1\0"+
    "\1\2\1\0\34\2\1\0\1\42\5\2\1\0\1\3"+
    "\1\0\1\3\43\0\3\4\1\0\43\4\1\2\1\0"+
    "\1\10\1\0\34\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\2\10\1\43\1\10\1\44"+
    "\1\45\2\10\1\46\6\10\1\47\1\50\13\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\1\10\1\51\4\10\1\52\3\10\1\53\21\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\6\10\1\54\2\10\1\55\5\10\1\56\14\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\4\10\1\57\2\10\1\60\14\10\1\61\2\10\1\62"+
    "\4\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\6\10\1\5\11\10\1\63\1\64\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\63\4\10\1\65\1\5\1\10\1\66"+
    "\1\67\3\10\1\5\15\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\70\5\10"+
    "\1\71\4\10\1\72\12\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\4\10\1\50\3\10"+
    "\1\73\13\10\1\50\7\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\1\10\1\74\17\10"+
    "\1\75\12\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\4\10\1\76\27\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\15\10"+
    "\1\21\16\10\1\37\1\40\1\10\1\21\1\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\1\10\1\77\4\10"+
    "\1\100\5\10\1\101\2\10\1\102\1\10\1\103\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\104\3\10\1\105\6\10\1\106\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\107\3\10\1\110\1\111\1\10\1\112"+
    "\3\10\1\113\1\10\1\114\15\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\13\10\1\115"+
    "\2\10\1\5\15\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\12\10\1\116\21\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\1\10\1\117\7\10\1\120\1\121\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\122\10\10\1\123\1\10\1\124\4\10\1\125\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\126\25\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\16\10\1\5\15\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\127\12\10\1\130\4\10\1\131\5\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\21\10\1\132\12\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\14\10\1\133\17\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\134\4\10\1\134\2\10\1\134\4\10"+
    "\1\134\1\10\1\134\13\10\1\37\1\40\3\10\1\2"+
    "\1\10\2\0\1\37\1\0\41\37\1\0\1\37\1\42"+
    "\1\0\1\40\1\0\34\40\1\135\1\40\1\10\2\40"+
    "\1\42\1\40\1\136\1\137\1\41\1\0\34\41\1\140"+
    "\1\141\2\41\1\142\1\2\1\41\1\42\1\0\1\42"+
    "\1\0\34\42\1\143\1\42\1\2\4\42\1\2\1\0"+
    "\1\10\1\0\2\10\1\50\1\144\30\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\5\10"+
    "\1\145\26\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\10\10\1\146\23\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\10\10"+
    "\1\147\23\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\12\10\1\150\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\10\10"+
    "\1\151\23\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\13\10\1\152\5\10\1\32\2\10"+
    "\1\153\7\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\24\10\1\154\7\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\4\10"+
    "\1\155\27\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\156\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\6\10"+
    "\1\157\12\10\1\160\12\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\5\10\1\161\26\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\16\10\1\162\15\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\24\10\1\163\7\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\164\7\10\1\165\15\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\23\10"+
    "\1\5\10\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\2\10\1\166\31\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\167\15\10\1\170\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\12\10\1\171\21\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\7\10\1\172\1\173\23\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\3\10\1\174"+
    "\1\10\1\175\1\10\1\176\6\10\1\177\1\200\14\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\4\10\1\50\27\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\10\10\1\201\23\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\202\25\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\4\10\1\203\27\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\20\10\1\204\13\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\17\10\1\205\14\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\11\10\1\206\22\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\11\10\1\207\22\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\13\10\1\210\20\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\1\10\1\211\32\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\20\10\1\212\13\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\1\10\1\213\32\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\20\10\1\214\13\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\5\10\1\215\13\10"+
    "\1\214\12\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\3\10\1\216\21\10\1\5\6\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\21\10\1\217\4\10\1\220\5\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\6\10"+
    "\1\221\1\10\1\222\23\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\223\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\7\10\1\224\1\10\1\225\1\10\1\226\20\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\227\4\10\1\230\2\10\1\231\22\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\31\10\1\232\2\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\5\10\1\233\11\10"+
    "\1\234\14\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\7\10\1\235\24\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\236\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\3\10\1\172\30\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\5\10"+
    "\1\237\26\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\17\10\1\234\14\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\4\10"+
    "\1\240\27\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\11\10\1\241\22\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\17\10"+
    "\1\32\14\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\1\10\1\242\32\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\11\10"+
    "\1\243\22\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\12\10\1\244\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\12\10"+
    "\1\71\21\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\245\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\143\1\0\1\135\1\0\36\135"+
    "\1\37\2\135\1\143\1\135\1\136\1\137\1\136\1\0"+
    "\34\136\1\137\1\246\2\136\1\247\1\2\1\136\3\137"+
    "\1\0\40\137\1\250\1\0\3\137\1\140\1\0\40\140"+
    "\1\251\1\0\1\140\1\246\1\137\1\141\1\0\34\141"+
    "\1\252\1\141\1\41\2\141\1\42\1\141\1\143\1\0"+
    "\1\143\1\0\36\143\1\0\4\143\1\2\1\0\1\10"+
    "\1\0\1\10\1\253\4\10\1\254\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\26\10"+
    "\1\255\5\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\12\10\1\256\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\11\10"+
    "\1\257\22\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\23\10\1\71\10\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\260\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\14\10\1\63\17\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\261\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\24\10\1\262\7\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\10\10"+
    "\1\263\23\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\1\10\1\264\32\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\265\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\4\10\1\172\27\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\26\10"+
    "\1\266\5\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\10\10\1\267\23\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\6\10"+
    "\1\270\25\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\5\10\1\271\26\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\6\10"+
    "\1\272\25\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\12\10\1\273\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\7\10"+
    "\1\274\24\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\275\10\10\1\276\14\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\23\10\1\277\10\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\5\25\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\17\10\1\172\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\300\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\12\10\1\301\21\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\213\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\17\10\1\302\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\303\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\304\32\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\7\10\1\5\24\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\15\10\1\305\1\10\1\306\14\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\20\10"+
    "\1\307\13\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\310\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\2\10"+
    "\1\311\5\10\1\312\23\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\24\10\1\5\7\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\17\10\1\313\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\25\10\1\314\6\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\12\10\1\315\21\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\3\10\1\316\30\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\10\10\1\5\23\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\1\10\1\317\32\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\320\25\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\11\10\1\321\22\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\322\25\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\2\10\1\5\31\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\12\10\1\323\1\324\14\10\1\325\3\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\11\10\1\316\4\10\1\326\15\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\7\10\1\327"+
    "\24\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\3\10\1\330\30\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\331"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\30\10\1\332\3\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\5\10\1\333"+
    "\26\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\6\10\1\334\25\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\6\10\1\335"+
    "\25\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\22\10\1\5\11\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\17\10\1\5"+
    "\14\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\6\10\1\336\25\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\4\10\1\337"+
    "\27\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\12\10\1\340\21\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\5\10\1\341"+
    "\26\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\5\10\1\342\26\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\343"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\17\10\1\344\14\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\345"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\11\10\1\267\22\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\246\1\137\1\246\1\0\34\246\1\346"+
    "\1\246\1\136\2\246\1\42\1\246\1\346\1\137\1\252"+
    "\1\0\36\252\1\140\2\252\1\143\1\252\1\2\1\0"+
    "\1\10\1\0\4\10\1\347\27\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\4\10\1\350"+
    "\27\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\21\10\1\351\12\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\21\10\1\352"+
    "\12\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\12\10\1\353\21\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\16\10\1\354"+
    "\15\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\14\10\1\355\17\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\12\10\1\356"+
    "\21\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\6\10\1\357\25\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\360"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\11\10\1\5\22\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\1\10\1\361"+
    "\32\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\25\10\1\50\6\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\5\10\1\214"+
    "\26\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\14\10\1\362\17\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\11\10\1\363"+
    "\22\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\24\10\1\267\7\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\7\10\1\364"+
    "\24\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\16\10\1\365\15\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\11\10\1\366"+
    "\22\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\23\10\1\367\10\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\22\10\1\316"+
    "\11\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\16\10\1\172\15\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\1\10\1\370"+
    "\32\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\1\10\1\221\32\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\371"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\12\10\1\32\21\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\12\10\1\105"+
    "\21\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\13\10\1\157\20\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\20\10\1\372"+
    "\13\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\21\10\1\373\12\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\12\10\1\374"+
    "\21\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\12\10\1\375\21\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\6\10\1\376"+
    "\11\10\1\377\13\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\10\10\1\u0100\23\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\6\10\1\50\25\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\10\10\1\u0101\23\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\15\10\1\u0102\16\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\6\10\1\u0103\25\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\2\10\1\u0104\31\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\2\10\1\u0105\31\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\17\10\1\u0106\14\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\21\10\1\u0107\12\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\20\10\1\377\13\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\21\10\1\u0108\12\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\12\10\1\u0109\21\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\12\10\1\u010a\21\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\4\10\1\u010b\27\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\10\10\1\u010c\23\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\1\10\1\u010d\32\10\1\37\1\40\3\10\1\2\1\10"+
    "\1\2\1\0\1\10\1\0\5\10\1\u010e\26\10\1\37"+
    "\1\40\3\10\1\2\1\10\1\2\1\0\1\10\1\0"+
    "\7\10\1\u010f\1\10\1\u0104\22\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\50"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\4\10\1\u0110\27\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\10\10\1\u0111"+
    "\23\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\6\10\1\u0112\25\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\26\10\1\367"+
    "\5\10\1\37\1\40\3\10\1\2\1\10\1\2\1\0"+
    "\1\10\1\0\2\10\1\u0113\31\10\1\37\1\40\3\10"+
    "\1\2\1\10\1\2\1\0\1\10\1\0\6\10\1\u0114"+
    "\25\10\1\37\1\40\3\10\1\2\1\10\1\346\1\137"+
    "\1\346\1\0\36\346\1\137\2\346\1\143\1\346\1\2"+
    "\1\0\1\10\1\0\5\10\1\u0115\26\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\10\10"+
    "\1\u0116\23\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\11\10\1\371\22\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\4\10"+
    "\1\u0117\27\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\13\10\1\271\20\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\u0118\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\17\10\1\u0119\14\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\5\10"+
    "\1\u011a\26\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\11\10\1\50\22\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\12\10"+
    "\1\213\21\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\4\10\1\214\27\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\10\10"+
    "\1\172\23\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\12\10\1\u011b\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\20\10"+
    "\1\63\13\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\21\10\1\u011c\12\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\u011d\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\265\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\5\10"+
    "\1\316\26\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\u011e\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\20\10"+
    "\1\50\13\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\4\10\1\u011f\27\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\5\10"+
    "\1\173\26\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\20\10\1\u0120\13\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\11\10"+
    "\1\372\22\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\21\10\1\u0121\12\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\12\10"+
    "\1\u0122\21\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\u0123\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\123\17\10\1\u0124\12\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\13\10\1\u0125\20\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\14\10\1\173\17\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\17\10\1\u0126\14\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\21\10\1\u0118\12\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\11\10\1\u0127\22\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\4\10\1\5\27\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\3\10\1\u0128\30\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\10\10\1\u0129\23\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\16\10\1\u012a\15\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\u012b\32\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\2\10\1\u012c\31\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\10\10\1\u012d\23\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\u012e\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\23\10\1\50\10\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\12\10\1\327\21\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\17\10\1\200\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\13\10\1\u012f\20\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\17\10\1\306\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\u0130\25\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\14\10\1\u0131\17\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\13\10\1\u0132\20\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\5\10\1\233\26\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\10\10\1\u0133\23\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\14\10\1\u0134\17\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\u0135\25\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\11\10\1\214\22\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\30\10\1\5\3\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\2\10\1\50\31\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\15\10\1\305\16\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\26\10\1\5\5\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\14\10\1\u0136\17\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\21\10\1\u0137\12\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\13\10\1\u0138\20\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\4\10\1\5\17\10\1\207\7\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\21\10"+
    "\1\u0139\12\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\u013a\25\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\17\10"+
    "\1\u013b\14\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\1\10\1\u013c\32\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\17\10"+
    "\1\316\14\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\21\10\1\u013d\12\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\10\10"+
    "\1\u013e\23\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\16\10\1\u013f\15\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\12\10"+
    "\1\u0140\21\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\2\10\1\172\31\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\21\10"+
    "\1\u0141\12\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\7\10\1\u0142\24\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\11\10"+
    "\1\316\22\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\1\10\1\357\32\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\23\10"+
    "\1\u0143\10\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\17\10\1\u0144\14\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\4\10"+
    "\1\u0145\27\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\4\10\1\221\27\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\4\10"+
    "\1\371\27\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\12\10\1\u0146\21\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\1\10"+
    "\1\u0147\32\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\10\10\1\u0148\23\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\2\10"+
    "\1\u0149\31\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\17\10\1\50\14\10\1\37\1\40"+
    "\3\10\1\2\1\10\1\2\1\0\1\10\1\0\12\10"+
    "\1\361\21\10\1\37\1\40\3\10\1\2\1\10\1\2"+
    "\1\0\1\10\1\0\6\10\1\5\12\10\1\357\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\17\10\1\u014a\14\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\3\10\1\u014b\30\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\11\10\1\u014c\22\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\361\25\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\u014d\32\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\10\10\1\u014e\23\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\5\10\1\172\26\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\u014f\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\11\10\1\221\22\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\12\10\1\u0150\21\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\20\10\1\u0151\13\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\1\10\1\u0152\32\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\372\25\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\2\10\1\367\31\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\7\10\1\u0153\24\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\25\10\1\5\6\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\7\10\1\172\24\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\7\10\1\u0154\24\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\16\10\1\u0155\15\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\25\10\1\u0156\6\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\6\10\1\u0157\25\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\u0158\25\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\1\10\1\u0159\32\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\6\10\1\u015a\25\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\7\10\1\u010f\24\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\21\10\1\u015b\12\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\30\10\1\u0108\3\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\11\10\1\u015c\22\10"+
    "\1\37\1\40\3\10\1\2\1\10\1\2\1\0\1\10"+
    "\1\0\14\10\1\214\17\10\1\37\1\40\3\10\1\2"+
    "\1\10\1\2\1\0\1\10\1\0\20\10\1\5\13\10"+
    "\1\37\1\40\3\10\1\2\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13299];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\133\1\2\0\375\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MinecraftLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 10: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 11: break;
          case 3: 
            { return MinecraftTypes.COMMENT;
            } 
            // fall through
          case 12: break;
          case 4: 
            { return MinecraftTypes.COMMAND;
            } 
            // fall through
          case 13: break;
          case 5: 
            { return MinecraftTypes.NUMBER;
            } 
            // fall through
          case 14: break;
          case 6: 
            { return MinecraftTypes.OBJECT;
            } 
            // fall through
          case 15: break;
          case 7: 
            { return MinecraftTypes.ARGUMENT;
            } 
            // fall through
          case 16: break;
          case 8: 
            { return MinecraftTypes.SELECTOR;
            } 
            // fall through
          case 17: break;
          case 9: 
            { return MinecraftTypes.STRING;
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
