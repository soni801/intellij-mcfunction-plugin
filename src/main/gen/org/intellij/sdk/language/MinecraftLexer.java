/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.MinecraftTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Minecraft.flex</tt>
 */
class MinecraftLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\43\1\1\1\3\2\42\1\3\22\43\1\1\1\43\1\41\1\2\11\43\1\21\2\43\12\40\5\43"+
    "\1\4\1\37\40\43\1\5\1\17\1\11\1\6\1\12\1\30\1\27\1\32\1\16\1\35\1\26\1\23"+
    "\1\13\1\10\1\25\1\22\1\36\1\15\1\24\1\14\1\20\1\7\1\34\1\33\1\31\4\43\1\40"+
    "\6\43\1\42\32\43\1\0\77\43\12\40\46\43\12\40\14\43\12\40\20\43\12\40\6\43"+
    "\12\40\6\43\13\0\35\43\2\42\5\43\1\0\57\43\1\0\26\43\12\40\16\43\62\40");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\13\4\1\5\11\4\1\3"+
    "\7\4\1\6\1\4\1\6\63\4\1\7\1\0\1\10"+
    "\37\4\1\3\16\4\1\6\23\4\1\10\5\4\1\3"+
    "\13\4\1\3\1\4\1\3\27\4\1\3\107\4\1\3"+
    "\3\4\1\3\71\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\154\0\330"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8"+
    "\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318"+
    "\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438"+
    "\0\u045c\0\u0480\0\u04a4\0\154\0\u04c8\0\u04ec\0\u0510\0\u0534"+
    "\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774"+
    "\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894"+
    "\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4"+
    "\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\154"+
    "\0\u0bf4\0\u03f0\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc"+
    "\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\u0dec"+
    "\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c"+
    "\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4\0\u1008\0\u102c"+
    "\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c"+
    "\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368\0\u138c"+
    "\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488\0\u14ac"+
    "\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u0bf4\0\u1560\0\u1584\0\u15a8"+
    "\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8"+
    "\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8"+
    "\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908"+
    "\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28"+
    "\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc\0\u1b00\0\u1b24\0\u1b48"+
    "\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20\0\u1c44\0\u1c68"+
    "\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8\0\u1d1c\0\u1d40\0\u1d64\0\u1d88"+
    "\0\u1dac\0\u1dd0\0\u1df4\0\u1e18\0\u1e3c\0\u1e60\0\u1e84\0\u1ea8"+
    "\0\u1ecc\0\u1ef0\0\u1f14\0\u1f38\0\u1f5c\0\u1f80\0\u1fa4\0\u1fc8"+
    "\0\u1fec\0\u2010\0\u2034\0\u2058\0\u207c\0\u20a0\0\u20c4\0\u20e8"+
    "\0\u210c\0\u2130\0\u2154\0\u2178\0\u219c\0\u21c0\0\u21e4\0\u2208"+
    "\0\u222c\0\u2250\0\u2274\0\u2298\0\u22bc\0\u22e0\0\u2304\0\u2328"+
    "\0\u234c\0\u2370\0\u2394\0\u23b8\0\u23dc\0\u2400\0\u2424\0\u2448"+
    "\0\u246c\0\u2490\0\u24b4\0\u24d8\0\u24fc\0\u2520\0\u2544\0\u2568"+
    "\0\u258c\0\u25b0\0\u25d4\0\u25f8\0\u261c\0\u2640\0\u2664\0\u2688"+
    "\0\u26ac\0\u26d0\0\u26f4\0\u2718\0\u273c\0\u2760\0\u2784\0\u27a8"+
    "\0\u27cc\0\u27f0\0\u2814\0\u2838\0\u285c\0\u2880\0\u28a4\0\u28c8"+
    "\0\u28ec\0\u2910\0\u2934\0\u2958\0\u297c\0\u29a0\0\u29c4\0\u29e8"+
    "\0\u2a0c\0\u2a30\0\u2a54\0\u2a78\0\u2a9c\0\u2ac0\0\u2ae4\0\u2b08"+
    "\0\u2b2c\0\u2b50\0\u2b74\0\u2b98\0\u2bbc\0\u2be0\0\u2c04\0\u2c28"+
    "\0\u2c4c\0\u2c70\0\u2c94\0\u2cb8\0\u2cdc\0\u2d00\0\u2d24\0\u2d48"+
    "\0\u2d6c\0\u2d90\0\u2db4\0\u2dd8\0\u2dfc\0\u2e20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\2\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\1\31\1\32\1\33\1\34\1\35\1\20"+
    "\1\36\1\0\1\7\1\0\1\2\1\0\1\2\40\0"+
    "\3\3\1\0\40\3\2\0\1\7\1\0\36\7\1\0"+
    "\1\7\2\0\1\7\1\0\2\7\1\37\1\7\1\40"+
    "\1\41\2\7\1\42\6\7\1\43\1\44\15\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\45\4\7\1\46"+
    "\3\7\1\47\23\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\50\2\7\1\51\5\7\1\52\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\53\2\7\1\54"+
    "\14\7\1\55\2\7\1\56\6\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\4\11\7\1\57\1\60\14\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\57\4\7"+
    "\1\61\1\4\1\7\1\62\1\63\3\7\1\4\17\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\64\5\7"+
    "\1\65\4\7\1\66\14\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\44\3\7\1\67\13\7\1\44\11\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\70\17\7"+
    "\1\71\14\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\72\31\7\1\0\1\7\2\0\1\7\1\0\15\7"+
    "\1\20\16\7\1\20\1\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\73\4\7\1\74\5\7\1\75\2\7"+
    "\1\76\1\7\1\77\14\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\100\3\7\1\101\6\7\1\102\14\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\103\3\7"+
    "\1\104\1\105\1\7\1\106\3\7\1\107\1\7\1\110"+
    "\17\7\1\0\1\7\2\0\1\7\1\0\13\7\1\111"+
    "\2\7\1\4\17\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\112\23\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\113\7\7\1\114\1\115\23\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\116\10\7\1\117\1\7"+
    "\1\120\4\7\1\121\14\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\122\27\7\1\0\1\7\2\0\1\7"+
    "\1\0\16\7\1\4\17\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\123\12\7\1\124\4\7\1\125\7\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\126\14\7"+
    "\1\0\1\7\2\0\1\7\1\0\14\7\1\127\21\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\130\4\7"+
    "\1\130\2\7\1\130\4\7\1\130\1\7\1\130\15\7"+
    "\1\0\1\7\2\131\1\36\1\0\35\36\1\132\1\0"+
    "\1\36\2\0\1\7\1\0\2\7\1\44\1\133\32\7"+
    "\1\0\1\7\2\0\1\7\1\0\5\7\1\134\30\7"+
    "\1\0\1\7\2\0\1\7\1\0\10\7\1\135\25\7"+
    "\1\0\1\7\2\0\1\7\1\0\10\7\1\136\25\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\137\23\7"+
    "\1\0\1\7\2\0\1\7\1\0\10\7\1\140\25\7"+
    "\1\0\1\7\2\0\1\7\1\0\13\7\1\141\5\7"+
    "\1\31\2\7\1\142\11\7\1\0\1\7\2\0\1\7"+
    "\1\0\24\7\1\143\11\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\144\31\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\145\27\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\146\12\7\1\147\14\7\1\0\1\7"+
    "\2\0\1\7\1\0\5\7\1\150\30\7\1\0\1\7"+
    "\2\0\1\7\1\0\16\7\1\151\17\7\1\0\1\7"+
    "\2\0\1\7\1\0\24\7\1\152\11\7\1\0\1\7"+
    "\2\0\1\7\1\0\6\7\1\153\7\7\1\154\17\7"+
    "\1\0\1\7\2\0\1\7\1\0\23\7\1\4\12\7"+
    "\1\0\1\7\2\0\1\7\1\0\2\7\1\155\33\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\156\15\7"+
    "\1\157\16\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\160\23\7\1\0\1\7\2\0\1\7\1\0\7\7"+
    "\1\161\1\162\25\7\1\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\163\1\7\1\164\1\7\1\165\6\7\1\166"+
    "\1\167\16\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\44\31\7\1\0\1\7\2\0\1\7\1\0\10\7"+
    "\1\170\25\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\171\27\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\172\31\7\1\0\1\7\2\0\1\7\1\0\20\7"+
    "\1\173\15\7\1\0\1\7\2\0\1\7\1\0\17\7"+
    "\1\174\16\7\1\0\1\7\2\0\1\7\1\0\11\7"+
    "\1\175\24\7\1\0\1\7\2\0\1\7\1\0\11\7"+
    "\1\176\24\7\1\0\1\7\2\0\1\7\1\0\13\7"+
    "\1\177\22\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\200\34\7\1\0\1\7\2\0\1\7\1\0\20\7"+
    "\1\201\15\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\202\34\7\1\0\1\7\2\0\1\7\1\0\20\7"+
    "\1\203\15\7\1\0\1\7\2\0\1\7\1\0\5\7"+
    "\1\204\13\7\1\203\14\7\1\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\205\21\7\1\4\10\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\206\4\7\1\207\7\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\210\1\7"+
    "\1\211\25\7\1\0\1\7\2\0\1\7\1\0\21\7"+
    "\1\212\14\7\1\0\1\7\2\0\1\7\1\0\7\7"+
    "\1\213\1\7\1\214\1\7\1\215\22\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\216\4\7\1\217\2\7"+
    "\1\220\24\7\1\0\1\7\2\0\1\7\1\0\31\7"+
    "\1\221\4\7\1\0\1\7\2\0\1\7\1\0\5\7"+
    "\1\222\11\7\1\223\16\7\1\0\1\7\2\0\1\7"+
    "\1\0\7\7\1\224\26\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\225\34\7\1\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\161\32\7\1\0\1\7\2\0\1\7"+
    "\1\0\5\7\1\226\30\7\1\0\1\7\2\0\1\7"+
    "\1\0\17\7\1\223\16\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\227\31\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\230\24\7\1\0\1\7\2\0\1\7"+
    "\1\0\17\7\1\31\16\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\231\34\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\232\24\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\233\23\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\65\23\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\234\27\7\1\0\1\7\3\131\1\0"+
    "\35\131\1\235\1\0\1\131\2\0\1\7\1\0\1\7"+
    "\1\236\4\7\1\237\27\7\1\0\1\7\2\0\1\7"+
    "\1\0\26\7\1\240\7\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\241\23\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\242\24\7\1\0\1\7\2\0\1\7"+
    "\1\0\23\7\1\65\12\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\243\34\7\1\0\1\7\2\0\1\7"+
    "\1\0\14\7\1\57\21\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\244\34\7\1\0\1\7\2\0\1\7"+
    "\1\0\24\7\1\245\11\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\246\25\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\247\34\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\250\34\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\161\31\7\1\0\1\7\2\0\1\7"+
    "\1\0\26\7\1\251\7\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\252\25\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\253\27\7\1\0\1\7\2\0\1\7"+
    "\1\0\5\7\1\254\30\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\255\27\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\256\23\7\1\0\1\7\2\0\1\7"+
    "\1\0\7\7\1\257\26\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\260\10\7\1\261\16\7\1\0\1\7"+
    "\2\0\1\7\1\0\23\7\1\262\12\7\1\0\1\7"+
    "\2\0\1\7\1\0\6\7\1\4\27\7\1\0\1\7"+
    "\2\0\1\7\1\0\17\7\1\161\16\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\263\14\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\264\23\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\202\14\7\1\0\1\7"+
    "\2\0\1\7\1\0\17\7\1\265\16\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\266\14\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\267\34\7\1\0\1\7"+
    "\2\0\1\7\1\0\7\7\1\4\26\7\1\0\1\7"+
    "\2\0\1\7\1\0\15\7\1\270\1\7\1\271\16\7"+
    "\1\0\1\7\2\0\1\7\1\0\20\7\1\272\15\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\273\27\7"+
    "\1\0\1\7\2\0\1\7\1\0\2\7\1\274\5\7"+
    "\1\275\25\7\1\0\1\7\2\0\1\7\1\0\24\7"+
    "\1\4\11\7\1\0\1\7\2\0\1\7\1\0\17\7"+
    "\1\276\16\7\1\0\1\7\2\0\1\7\1\0\25\7"+
    "\1\277\10\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\300\23\7\1\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\301\32\7\1\0\1\7\2\0\1\7\1\0\10\7"+
    "\1\4\25\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\302\34\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\303\27\7\1\0\1\7\2\0\1\7\1\0\11\7"+
    "\1\304\24\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\305\27\7\1\0\1\7\2\0\1\7\1\0\2\7"+
    "\1\4\33\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\306\1\307\14\7\1\310\5\7\1\0\1\7\2\0"+
    "\1\7\1\0\11\7\1\301\4\7\1\311\17\7\1\0"+
    "\1\7\2\0\1\7\1\0\7\7\1\312\26\7\1\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\313\32\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\314\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\30\7\1\315\5\7\1\0"+
    "\1\7\2\0\1\7\1\0\5\7\1\316\30\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\317\27\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\320\27\7\1\0"+
    "\1\7\2\0\1\7\1\0\22\7\1\4\13\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\4\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\321\27\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\322\31\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\323\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\5\7\1\324\30\7\1\0"+
    "\1\7\2\0\1\7\1\0\5\7\1\325\30\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\326\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\327\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\330\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\11\7\1\252\24\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\331\31\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\332\31\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\333\14\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\334\14\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\335\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\16\7\1\336\17\7\1\0"+
    "\1\7\2\0\1\7\1\0\14\7\1\337\21\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\340\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\341\27\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\342\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\11\7\1\4\24\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\343\34\7\1\0"+
    "\1\7\2\0\1\7\1\0\25\7\1\44\10\7\1\0"+
    "\1\7\2\0\1\7\1\0\5\7\1\203\30\7\1\0"+
    "\1\7\2\0\1\7\1\0\14\7\1\344\21\7\1\0"+
    "\1\7\2\0\1\7\1\0\11\7\1\345\24\7\1\0"+
    "\1\7\2\0\1\7\1\0\24\7\1\252\11\7\1\0"+
    "\1\7\2\0\1\7\1\0\7\7\1\346\26\7\1\0"+
    "\1\7\2\0\1\7\1\0\16\7\1\347\17\7\1\0"+
    "\1\7\2\0\1\7\1\0\11\7\1\350\24\7\1\0"+
    "\1\7\2\0\1\7\1\0\23\7\1\351\12\7\1\0"+
    "\1\7\2\0\1\7\1\0\22\7\1\301\13\7\1\0"+
    "\1\7\2\0\1\7\1\0\16\7\1\161\17\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\352\34\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\210\34\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\353\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\31\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\101\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\13\7\1\146\22\7\1\0"+
    "\1\7\2\0\1\7\1\0\20\7\1\354\15\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\355\14\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\356\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\357\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\360\11\7\1\361"+
    "\15\7\1\0\1\7\2\0\1\7\1\0\10\7\1\362"+
    "\25\7\1\0\1\7\2\0\1\7\1\0\6\7\1\44"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\10\7\1\363"+
    "\25\7\1\0\1\7\2\0\1\7\1\0\15\7\1\364"+
    "\20\7\1\0\1\7\2\0\1\7\1\0\6\7\1\365"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\2\7\1\366"+
    "\33\7\1\0\1\7\2\0\1\7\1\0\2\7\1\367"+
    "\33\7\1\0\1\7\2\0\1\7\1\0\17\7\1\370"+
    "\16\7\1\0\1\7\2\0\1\7\1\0\21\7\1\371"+
    "\14\7\1\0\1\7\2\0\1\7\1\0\20\7\1\361"+
    "\15\7\1\0\1\7\2\0\1\7\1\0\21\7\1\372"+
    "\14\7\1\0\1\7\2\0\1\7\1\0\12\7\1\373"+
    "\23\7\1\0\1\7\2\0\1\7\1\0\12\7\1\374"+
    "\23\7\1\0\1\7\2\0\1\7\1\0\4\7\1\375"+
    "\31\7\1\0\1\7\2\0\1\7\1\0\10\7\1\376"+
    "\25\7\1\0\1\7\2\0\1\7\1\0\1\7\1\377"+
    "\34\7\1\0\1\7\2\0\1\7\1\0\5\7\1\u0100"+
    "\30\7\1\0\1\7\2\0\1\7\1\0\7\7\1\u0101"+
    "\1\7\1\366\24\7\1\0\1\7\2\0\1\7\1\0"+
    "\10\7\1\44\25\7\1\0\1\7\2\0\1\7\1\0"+
    "\4\7\1\u0102\31\7\1\0\1\7\2\0\1\7\1\0"+
    "\10\7\1\u0103\25\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\u0104\27\7\1\0\1\7\2\0\1\7\1\0"+
    "\26\7\1\351\7\7\1\0\1\7\2\0\1\7\1\0"+
    "\2\7\1\u0105\33\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\u0106\27\7\1\0\1\7\2\0\1\7\1\0"+
    "\5\7\1\u0107\30\7\1\0\1\7\2\0\1\7\1\0"+
    "\10\7\1\u0108\25\7\1\0\1\7\2\0\1\7\1\0"+
    "\11\7\1\353\24\7\1\0\1\7\2\0\1\7\1\0"+
    "\4\7\1\u0109\31\7\1\0\1\7\2\0\1\7\1\0"+
    "\13\7\1\254\22\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\u010a\34\7\1\0\1\7\2\0\1\7\1\0"+
    "\17\7\1\u010b\16\7\1\0\1\7\2\0\1\7\1\0"+
    "\5\7\1\u010c\30\7\1\0\1\7\2\0\1\7\1\0"+
    "\11\7\1\44\24\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\202\23\7\1\0\1\7\2\0\1\7\1\0"+
    "\4\7\1\203\31\7\1\0\1\7\2\0\1\7\1\0"+
    "\10\7\1\161\25\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\u010d\23\7\1\0\1\7\2\0\1\7\1\0"+
    "\20\7\1\57\15\7\1\0\1\7\2\0\1\7\1\0"+
    "\21\7\1\u010e\14\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\u010f\34\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\250\27\7\1\0\1\7\2\0\1\7\1\0"+
    "\5\7\1\301\30\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\u0110\27\7\1\0\1\7\2\0\1\7\1\0"+
    "\20\7\1\44\15\7\1\0\1\7\2\0\1\7\1\0"+
    "\4\7\1\u0111\31\7\1\0\1\7\2\0\1\7\1\0"+
    "\5\7\1\162\30\7\1\0\1\7\2\0\1\7\1\0"+
    "\20\7\1\u0112\15\7\1\0\1\7\2\0\1\7\1\0"+
    "\11\7\1\354\24\7\1\0\1\7\2\0\1\7\1\0"+
    "\21\7\1\u0113\14\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\u0114\23\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\u0115\27\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\117\17\7\1\u0116\14\7\1\0\1\7\2\0"+
    "\1\7\1\0\13\7\1\u0117\22\7\1\0\1\7\2\0"+
    "\1\7\1\0\14\7\1\162\21\7\1\0\1\7\2\0"+
    "\1\7\1\0\17\7\1\u0118\16\7\1\0\1\7\2\0"+
    "\1\7\1\0\21\7\1\u010a\14\7\1\0\1\7\2\0"+
    "\1\7\1\0\11\7\1\u0119\24\7\1\0\1\7\2\0"+
    "\1\7\1\0\4\7\1\4\31\7\1\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\u011a\32\7\1\0\1\7\2\0"+
    "\1\7\1\0\10\7\1\u011b\25\7\1\0\1\7\2\0"+
    "\1\7\1\0\16\7\1\u011c\17\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\u011d\34\7\1\0\1\7\2\0"+
    "\1\7\1\0\2\7\1\u011e\33\7\1\0\1\7\2\0"+
    "\1\7\1\0\10\7\1\u011f\25\7\1\0\1\7\2\0"+
    "\1\7\1\0\21\7\1\u0120\14\7\1\0\1\7\2\0"+
    "\1\7\1\0\23\7\1\44\12\7\1\0\1\7\2\0"+
    "\1\7\1\0\12\7\1\312\23\7\1\0\1\7\2\0"+
    "\1\7\1\0\17\7\1\167\16\7\1\0\1\7\2\0"+
    "\1\7\1\0\13\7\1\u0121\22\7\1\0\1\7\2\0"+
    "\1\7\1\0\17\7\1\271\16\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\u0122\27\7\1\0\1\7\2\0"+
    "\1\7\1\0\14\7\1\u0123\21\7\1\0\1\7\2\0"+
    "\1\7\1\0\13\7\1\u0124\22\7\1\0\1\7\2\0"+
    "\1\7\1\0\5\7\1\222\30\7\1\0\1\7\2\0"+
    "\1\7\1\0\10\7\1\u0125\25\7\1\0\1\7\2\0"+
    "\1\7\1\0\14\7\1\u0126\21\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\u0127\27\7\1\0\1\7\2\0"+
    "\1\7\1\0\11\7\1\203\24\7\1\0\1\7\2\0"+
    "\1\7\1\0\30\7\1\4\5\7\1\0\1\7\2\0"+
    "\1\7\1\0\2\7\1\44\33\7\1\0\1\7\2\0"+
    "\1\7\1\0\15\7\1\270\20\7\1\0\1\7\2\0"+
    "\1\7\1\0\26\7\1\4\7\7\1\0\1\7\2\0"+
    "\1\7\1\0\14\7\1\u0128\21\7\1\0\1\7\2\0"+
    "\1\7\1\0\21\7\1\u0129\14\7\1\0\1\7\2\0"+
    "\1\7\1\0\13\7\1\u012a\22\7\1\0\1\7\2\0"+
    "\1\7\1\0\4\7\1\4\17\7\1\176\11\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\u012b\14\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\u012c\27\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\u012d\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\u012e\34\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\301\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\u012f\14\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\u0130\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\16\7\1\u0131\17\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\u0132\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\2\7\1\161\33\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\u0133\14\7\1\0"+
    "\1\7\2\0\1\7\1\0\7\7\1\u0134\26\7\1\0"+
    "\1\7\2\0\1\7\1\0\11\7\1\301\24\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\341\34\7\1\0"+
    "\1\7\2\0\1\7\1\0\23\7\1\u0135\12\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\u0136\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\u0137\31\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\210\31\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\353\31\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\u0138\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\u0139\34\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\u013a\25\7\1\0"+
    "\1\7\2\0\1\7\1\0\2\7\1\u013b\33\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\44\16\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\343\23\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\4\12\7\1\341"+
    "\14\7\1\0\1\7\2\0\1\7\1\0\17\7\1\u013c"+
    "\16\7\1\0\1\7\2\0\1\7\1\0\3\7\1\u013d"+
    "\32\7\1\0\1\7\2\0\1\7\1\0\11\7\1\u013e"+
    "\24\7\1\0\1\7\2\0\1\7\1\0\6\7\1\343"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\1\7\1\u013f"+
    "\34\7\1\0\1\7\2\0\1\7\1\0\10\7\1\u0140"+
    "\25\7\1\0\1\7\2\0\1\7\1\0\5\7\1\161"+
    "\30\7\1\0\1\7\2\0\1\7\1\0\21\7\1\u0141"+
    "\14\7\1\0\1\7\2\0\1\7\1\0\11\7\1\210"+
    "\24\7\1\0\1\7\2\0\1\7\1\0\12\7\1\u0142"+
    "\23\7\1\0\1\7\2\0\1\7\1\0\20\7\1\u0143"+
    "\15\7\1\0\1\7\2\0\1\7\1\0\1\7\1\u0144"+
    "\34\7\1\0\1\7\2\0\1\7\1\0\6\7\1\354"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\2\7\1\351"+
    "\33\7\1\0\1\7\2\0\1\7\1\0\7\7\1\u0145"+
    "\26\7\1\0\1\7\2\0\1\7\1\0\25\7\1\4"+
    "\10\7\1\0\1\7\2\0\1\7\1\0\7\7\1\161"+
    "\26\7\1\0\1\7\2\0\1\7\1\0\7\7\1\u0146"+
    "\26\7\1\0\1\7\2\0\1\7\1\0\16\7\1\u0147"+
    "\17\7\1\0\1\7\2\0\1\7\1\0\25\7\1\u0148"+
    "\10\7\1\0\1\7\2\0\1\7\1\0\6\7\1\u0149"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\6\7\1\u014a"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\1\7\1\u014b"+
    "\34\7\1\0\1\7\2\0\1\7\1\0\6\7\1\u014c"+
    "\27\7\1\0\1\7\2\0\1\7\1\0\7\7\1\u0101"+
    "\26\7\1\0\1\7\2\0\1\7\1\0\21\7\1\u014d"+
    "\14\7\1\0\1\7\2\0\1\7\1\0\30\7\1\372"+
    "\5\7\1\0\1\7\2\0\1\7\1\0\11\7\1\u014e"+
    "\24\7\1\0\1\7\2\0\1\7\1\0\14\7\1\203"+
    "\21\7\1\0\1\7\2\0\1\7\1\0\20\7\1\4"+
    "\15\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\127\1\1\0\365\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MinecraftLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 9: break;
          case 2: 
            { return MinecraftTypes.COMMENT;
            } 
            // fall through
          case 10: break;
          case 3: 
            { return MinecraftTypes.COMMAND;
            } 
            // fall through
          case 11: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 12: break;
          case 5: 
            { return MinecraftTypes.NUMBER;
            } 
            // fall through
          case 13: break;
          case 6: 
            { return MinecraftTypes.ARGUMENT;
            } 
            // fall through
          case 14: break;
          case 7: 
            { return MinecraftTypes.SELECTOR;
            } 
            // fall through
          case 15: break;
          case 8: 
            { return MinecraftTypes.STRING;
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
