/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.MinecraftTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Minecraft.flex</tt>
 */
class MinecraftLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\45\1\1\1\3\2\44\1\3\22\45\1\41\1\45\1\43\1\2\11\45\1\21\2\45\12\42\1\40"+
    "\4\45\1\4\1\37\40\45\1\5\1\17\1\11\1\6\1\12\1\30\1\27\1\32\1\16\1\35\1\26"+
    "\1\23\1\13\1\10\1\25\1\22\1\36\1\15\1\24\1\14\1\20\1\7\1\34\1\33\1\31\4\45"+
    "\1\42\6\45\1\44\32\45\1\0\77\45\12\42\46\45\12\42\14\45\12\42\20\45\12\42"+
    "\6\45\12\42\6\45\13\0\35\45\2\44\5\45\1\0\57\45\1\0\26\45\12\42\16\45\62\42");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\13\4\1\5\11\4\1\3"+
    "\7\4\1\6\1\4\1\6\64\4\1\7\1\0\1\10"+
    "\40\4\1\3\16\4\1\6\23\4\1\10\5\4\1\3"+
    "\14\4\1\3\1\4\1\3\27\4\1\3\111\4\1\3"+
    "\3\4\1\3\63\4\1\11\11\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\162\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\162\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\162\0\u0cc4\0\u0428\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372"+
    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2"+
    "\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u0cc4\0\u16dc"+
    "\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c"+
    "\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c"+
    "\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c"+
    "\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c"+
    "\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc"+
    "\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc"+
    "\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c"+
    "\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c"+
    "\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c"+
    "\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc"+
    "\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec"+
    "\0\u2412\0\u2438\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6\0\u251c"+
    "\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c"+
    "\0\u2672\0\u2698\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c"+
    "\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac"+
    "\0\u28d2\0\u28f8\0\u291e\0\u2944\0\u296a\0\u2990\0\u29b6\0\u29dc"+
    "\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a\0\u2ac0\0\u2ae6\0\u2b0c"+
    "\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4\0\u2bca\0\u2bf0\0\u2c16\0\u2c3c"+
    "\0\u2c62\0\u2c88\0\u2cae\0\u2cd4\0\u2cfa\0\u2d20\0\u2d46\0\u2d6c"+
    "\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76\0\u2e9c"+
    "\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6\0\u2fcc"+
    "\0\u2ff2\0\u3018\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6\0\u30fc"+
    "\0\u3122\0\u3148\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\2\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\1\31\1\32\1\33\1\34\1\35\1\7"+
    "\1\2\1\20\1\36\1\0\1\7\1\0\1\2\1\0"+
    "\1\2\35\0\1\2\4\0\3\3\1\0\42\3\2\0"+
    "\1\7\1\0\35\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\2\7\1\37\1\7\1\40\1\41\2\7"+
    "\1\42\6\7\1\43\1\44\14\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\45\4\7\1\46"+
    "\3\7\1\47\22\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\50\2\7\1\51\5\7\1\52"+
    "\15\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\4\7\1\53\2\7\1\54\14\7\1\55\2\7\1\56"+
    "\5\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\4\3\7\1\57\5\7\1\60\1\61\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\60\4\7\1\62\1\4\1\7\1\63\1\64\3\7"+
    "\1\4\16\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\65\5\7\1\66\4\7\1\67\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\44\3\7\1\70\13\7\1\44\10\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\71\17\7"+
    "\1\72\13\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\73\30\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\15\7\1\20\17\7\1\0\1\20"+
    "\1\7\1\0\1\7\2\0\1\7\1\0\1\7\1\74"+
    "\4\7\1\75\5\7\1\76\2\7\1\77\1\7\1\100"+
    "\13\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\101\3\7\1\102\6\7\1\103\13\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\104"+
    "\3\7\1\105\1\106\1\7\1\107\3\7\1\110\1\7"+
    "\1\111\16\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\13\7\1\112\2\7\1\4\16\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\113\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\114\7\7\1\115\1\116\22\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\117\10\7\1\120"+
    "\1\7\1\121\4\7\1\122\13\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\123\26\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\16\7\1\4"+
    "\16\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\124\12\7\1\125\4\7\1\126\6\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\21\7\1\127"+
    "\13\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\14\7\1\130\20\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\131\4\7\1\131\2\7\1\131"+
    "\4\7\1\131\1\7\1\131\14\7\1\0\2\7\1\0"+
    "\1\7\2\132\1\36\1\0\35\36\1\132\1\36\1\133"+
    "\1\0\1\36\2\0\1\7\1\0\2\7\1\44\1\134"+
    "\31\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\5\7\1\135\27\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\10\7\1\136\24\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\137\24\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\140"+
    "\22\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\10\7\1\141\24\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\13\7\1\142\5\7\1\31\2\7\1\143"+
    "\10\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\24\7\1\144\10\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\4\7\1\145\30\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\146\26\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\6\7\1\147"+
    "\12\7\1\150\13\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\5\7\1\151\27\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\16\7\1\152\16\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\24\7\1\153"+
    "\10\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\154\7\7\1\155\16\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\156\30\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\23\7\1\4"+
    "\11\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\2\7\1\157\32\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\160\15\7\1\161\15\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\162"+
    "\22\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\7\7\1\163\1\164\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\165\1\7\1\166\1\7"+
    "\1\167\6\7\1\170\1\171\15\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\44\30\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\10\7\1\172"+
    "\24\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\173\26\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\4\7\1\174\30\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\20\7\1\175\14\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\17\7\1\176"+
    "\15\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\11\7\1\177\23\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\11\7\1\200\23\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\13\7\1\201\21\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\202"+
    "\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\20\7\1\203\14\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\204\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\20\7\1\205\14\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\5\7\1\206"+
    "\13\7\1\205\13\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\207\21\7\1\4\7\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\21\7\1\210"+
    "\4\7\1\211\6\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\212\1\7\1\213\24\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\21\7\1\214"+
    "\13\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\7\7\1\215\1\7\1\216\1\7\1\217\21\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\220"+
    "\4\7\1\221\2\7\1\222\23\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\31\7\1\223\3\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\5\7\1\224"+
    "\11\7\1\225\15\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\7\7\1\226\25\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\227\33\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\3\7\1\163"+
    "\31\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\5\7\1\230\27\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\17\7\1\225\15\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\231\30\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\11\7\1\232"+
    "\23\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\17\7\1\31\15\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\233\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\11\7\1\234\23\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\235"+
    "\22\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\66\22\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\236\26\7\1\0\2\7\1\0"+
    "\1\7\3\132\1\0\37\132\1\237\1\0\1\132\2\0"+
    "\1\7\1\0\1\7\1\240\4\7\1\241\26\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\26\7\1\242"+
    "\6\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\243\22\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\11\7\1\244\23\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\23\7\1\66\11\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\245"+
    "\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\14\7\1\60\20\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\246\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\24\7\1\247\10\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\10\7\1\250"+
    "\24\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\251\33\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\252\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\4\7\1\163\30\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\26\7\1\253"+
    "\6\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\10\7\1\254\24\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\6\7\1\255\26\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\5\7\1\256\27\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\6\7\1\257"+
    "\26\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\260\26\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\12\7\1\261\22\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\7\7\1\262\25\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\6\7\1\263"+
    "\10\7\1\264\15\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\23\7\1\265\11\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\4\26\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\17\7\1\163"+
    "\15\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\21\7\1\266\13\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\12\7\1\267\22\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\21\7\1\204\13\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\17\7\1\270"+
    "\15\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\21\7\1\271\13\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\272\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\7\7\1\4\25\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\15\7\1\273"+
    "\1\7\1\274\15\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\20\7\1\275\14\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\276\26\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\2\7\1\277"+
    "\5\7\1\300\24\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\24\7\1\4\10\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\17\7\1\301\15\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\25\7\1\302"+
    "\7\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\303\22\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\304\31\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\10\7\1\4\24\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\305"+
    "\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\306\26\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\11\7\1\307\23\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\6\7\1\310\26\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\2\7\1\4"+
    "\32\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\12\7\1\311\1\312\14\7\1\313\4\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\11\7\1\304\4\7"+
    "\1\314\16\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\7\7\1\315\25\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\316\31\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\10\7\1\317\24\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\30\7"+
    "\1\320\4\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\5\7\1\321\27\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\6\7\1\322\26\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\323\26\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\22\7"+
    "\1\4\12\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\17\7\1\4\15\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\6\7\1\324\26\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\4\7\1\325\30\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\326\22\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\5\7\1\327\27\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\5\7\1\330\27\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\10\7\1\331\24\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\17\7"+
    "\1\332\15\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\333\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\11\7\1\254\23\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\4\7\1\334\30\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\335\30\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\21\7\1\336\13\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\337\13\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\340\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\16\7"+
    "\1\341\16\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\14\7\1\342\20\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\343\22\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\344\26\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\10\7"+
    "\1\345\24\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\4\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\346\33\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\25\7\1\44\7\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\5\7"+
    "\1\205\27\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\14\7\1\347\20\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\11\7\1\350\23\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\5\7\1\351\27\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\24\7"+
    "\1\254\10\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\7\7\1\352\25\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\16\7\1\353\16\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\11\7\1\354\23\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\23\7"+
    "\1\355\11\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\22\7\1\304\12\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\16\7\1\163\16\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\356\33\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\212\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\357\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\31\22\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\102\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\13\7"+
    "\1\147\21\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\20\7\1\360\14\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\361\13\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\362\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\363\22\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\364\11\7\1\365\14\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\10\7\1\366\24\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\44\26\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\367\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\15\7\1\370\17\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\371\26\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\2\7"+
    "\1\372\32\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\2\7\1\373\32\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\17\7\1\374\15\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\375\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\20\7"+
    "\1\365\14\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\21\7\1\376\13\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\377\22\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\u0100\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\u0101\30\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\u0102\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\u0103\33\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\5\7\1\u0104\27\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\7\7"+
    "\1\u0105\1\7\1\372\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\10\7\1\44\24\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\4\7\1\u0106\30\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\10\7"+
    "\1\u0107\24\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\u0108\26\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\26\7\1\355\6\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\2\7\1\u0109\32\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\u010a\26\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\5\7\1\u010b\27\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\10\7\1\u010c\24\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\11\7\1\357\23\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\u010d\30\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\13\7\1\256\21\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\u010e\33\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\17\7\1\u010f\15\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\5\7"+
    "\1\u0110\27\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\44\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\12\7\1\204\22\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\4\7\1\205\30\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\10\7"+
    "\1\163\24\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\u0111\22\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\11\7\1\u0112\23\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\20\7\1\60\14\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\21\7"+
    "\1\u0113\13\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\u0114\33\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\6\7\1\252\26\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\5\7\1\304\27\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\u0115\26\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\20\7\1\44\14\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\4\7\1\u0116\30\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\5\7\1\164\27\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\20\7"+
    "\1\u0117\14\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\360\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\u0118\13\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\u0119\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\u011a\26\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\120\17\7\1\u011b\13\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\13\7\1\u011c\21\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\14\7"+
    "\1\164\20\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\17\7\1\u011d\15\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\21\7\1\u010e\13\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\11\7\1\u011e\23\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\4\7"+
    "\1\4\30\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\u011f\31\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\10\7\1\u0120\24\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\16\7\1\u0121\16\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\u0122\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\2\7\1\u0123\32\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\10\7\1\u0124\24\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\u0125\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\23\7"+
    "\1\44\11\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\315\22\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\17\7\1\171\15\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\13\7\1\u0126\21\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\17\7"+
    "\1\274\15\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\u0127\26\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\14\7\1\u0128\20\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\13\7\1\u0129\21\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\5\7"+
    "\1\224\27\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\u012a\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\14\7\1\u012b\20\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\6\7\1\u012c\26\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\u012d\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\205\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\30\7\1\4\4\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\2\7\1\44\32\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\15\7"+
    "\1\273\17\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\26\7\1\4\6\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\14\7\1\u012e\20\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\u012f\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\13\7"+
    "\1\u0130\21\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\4\17\7\1\200\10\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\u0131\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\u0132\26\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\17\7\1\u0133\15\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\u0134\33\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\17\7\1\304\15\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\21\7"+
    "\1\u0135\13\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\u0136\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\16\7\1\u0137\16\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\u0138\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\2\7"+
    "\1\163\32\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\21\7\1\u0139\13\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\7\7\1\u013a\25\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\11\7\1\304\23\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\344\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\23\7\1\u013b\11\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\17\7\1\u013c\15\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\4\7\1\u013d\30\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\24\7"+
    "\1\u013e\10\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\4\7\1\212\30\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\4\7\1\357\30\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\12\7\1\u013f\22\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\u0140\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\10\7\1\u0141\24\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\2\7\1\u0142\32\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\17\7\1\44\15\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\346\22\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\4\12\7\1\344\13\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\17\7\1\u0143\15\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\u0144\31\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\u0145\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\6\7\1\346\26\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\u0146\33\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\10\7"+
    "\1\u0147\24\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\5\7\1\163\27\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\10\7\1\u0148\24\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\u0149\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\11\7"+
    "\1\212\23\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\12\7\1\u014a\22\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\20\7\1\u014b\14\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\1\u014c\33\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\6\7"+
    "\1\360\26\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\2\7\1\355\32\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\7\7\1\u014d\25\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\25\7\1\4\7\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\34\7"+
    "\1\u014e\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\7\7\1\163\25\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\7\7\1\u014f\25\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\16\7\1\u0150\16\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\25\7\1\u0151"+
    "\7\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\6\7\1\u0152\26\7\1\0\2\7\1\0\1\7\41\u014e"+
    "\1\0\4\u014e\2\0\1\7\1\0\6\7\1\u0153\26\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\u0154\33\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\6\7\1\u0155\26\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\7\7\1\u0105\25\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\21\7\1\u0156\13\7"+
    "\1\0\2\7\1\0\1\7\2\0\1\7\1\0\30\7"+
    "\1\376\4\7\1\0\2\7\1\0\1\7\2\0\1\7"+
    "\1\0\11\7\1\u0157\23\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\14\7\1\205\20\7\1\0\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\20\7\1\4\14\7"+
    "\1\0\2\7\1\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\130\1\1\0\375\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MinecraftLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 10: break;
          case 2: 
            { return MinecraftTypes.COMMENT;
            } 
            // fall through
          case 11: break;
          case 3: 
            { return MinecraftTypes.COMMAND;
            } 
            // fall through
          case 12: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 13: break;
          case 5: 
            { return MinecraftTypes.NUMBER;
            } 
            // fall through
          case 14: break;
          case 6: 
            { return MinecraftTypes.ARGUMENT;
            } 
            // fall through
          case 15: break;
          case 7: 
            { return MinecraftTypes.SELECTOR;
            } 
            // fall through
          case 16: break;
          case 8: 
            { return MinecraftTypes.STRING;
            } 
            // fall through
          case 17: break;
          case 9: 
            { return MinecraftTypes.OBJECT;
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
